type Query {
        users(query: String): [User!]!
        posts(query: String): [Post!]!
        comments: [Comment!]! 
    }

    type Mutation {
        createUser(data: CreateInputUser!): User!
        deleteUser(id: ID!): User!
        updateUser(id: ID!, data: UpdateInputUser!): User!
        createPost(data: CreateInputPost!): Post!
        deletePost(id: ID!): Post!
        updatePost(id: ID!, data: UpdateInputPost!): Post!
        createComment(data: CreateInputComment!): Comment!
        deleteComment(id: ID!): Comment!
        updateComment(id: ID!, data: UpdateInputComment!): Comment!
    }

    type Subscription {
        comment(postId: ID!): CommentSubscriptionPayload!
        post: PostSubscriptionPayload!
    }

    input CreateInputUser {
        name: String!
        email: String!
    }

    input UpdateInputUser {
        name: String
        email: String
    }

    input CreateInputPost {
        title: String!
        body: String!
        published: Boolean! 
        author: ID!
    }

    input UpdateInputPost {
        title: String
        body: String
        published: Boolean
    }

    input CreateInputComment {
        text: String!
        author: ID!
        post: ID!
    }

    input UpdateInputComment {
        text: String
    }

    type User {
        id: ID!
        name: String!
        email: String!
        posts: [Post!]!
        comments: [Comment!]!
    }

    type Post {
       id: ID!
       title: String!
       body: String!
       published: Boolean! 
       author: User!
       comments: [Comment!]!
    }

    type Comment {
        id: ID!
        text: String!
        author: User!
        post: Post!
    }

    enum MutationType {
        CREATED
        UPDATED
        DELETED
    }

    type PostSubscriptionPayload {
        mutation: MutationType!
        node: Post
    }

     type CommentSubscriptionPayload {
        mutation: MutationType!
        node: Comment
    }